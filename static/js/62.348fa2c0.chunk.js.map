{"version":3,"file":"static/js/62.348fa2c0.chunk.js","mappings":"sKACA,I,SCeA,MAXA,WACE,OAME,eAAIA,UDXoB,6BCWxB,sBAEH,C,uHCbD,GAAgB,aAAe,mCAAmC,aAAe,oC,UCAjF,EAAyB,uB,SCOjBC,EAAWC,EACXC,EAA0CC,EAAAA,aAA5BC,EAA4BD,EAAAA,aAAdE,EAAcF,EAAAA,UA+ClD,EA7CqB,SAAC,GAAiB,IAAfG,EAAc,EAAdA,QACdC,EAAqBD,EAArBC,GAAIC,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,OAEZC,GAAWC,EAAAA,EAAAA,MAmBjB,OACE,gBAAIZ,UAAWK,EAAf,WACE,SAAC,MAAD,CAAYL,UAAWG,IACtBM,EAFH,KAEWC,GACT,mBACEV,UAAS,UAAKC,EAAL,YAAeK,GACxBO,KAAK,SACLC,QAxBe,WACnBC,IAAAA,KAAU,CACRC,MAAO,gBACPC,KAAM,oCACNC,KAAM,UACNC,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBC,kBAAkB,oBACjBC,MAAK,SAAAC,GACFA,EAAOC,cACTV,IAAAA,KAAU,WAAV,mBAAkCN,EAAlC,uBAA6D,WAC7DE,GAASe,EAAAA,EAAAA,IAAclB,IAE1B,GACF,EAMG,sBASL,EC9CYmB,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EACvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EAGnBC,EAAwB,SAAAP,GACnC,IAAMC,EAAWF,EAAeC,GAC1BQ,EAJoB,SAAAR,GAAK,OAAIA,EAAMQ,MAAV,CAIhBC,CAAaT,GAE5B,GAAIQ,EAAOE,OAAS,EAAG,CACrB,IAAMC,EAAmBH,EAAOI,cAAcC,OAC9C,OAAOZ,EAASO,QAAO,SAAA7B,GAAO,OAC5BA,EAAQE,KAAK+B,cAAcE,SAASH,EADR,GAG/B,CACD,OAAOV,CACR,ECNOc,ECTwE,oCDSzDC,ECTO,kCDSMC,ECT0I,8BDSjIC,ECTqF,kCDSxEC,ECTgK,kCDqC1N,EA1BqB,WACnB,IAAMlB,GAAWmB,EAAAA,EAAAA,IAAYrB,GACvBsB,GAAkBD,EAAAA,EAAAA,IAAYb,GAC9BH,GAAYgB,EAAAA,EAAAA,IAAYjB,GAE9B,OACE,iCACE,eAAI/B,UAAW2C,EAAf,uBACS,OAARd,QAAQ,IAARA,OAAA,EAAAA,EAAUS,QAAS,IAClB,eAAItC,UAAW4C,EAAf,SACGK,EAAgBC,KAAI,SAAA3C,GACnB,OAAO,SAAC,EAAD,CAA+BA,QAASA,GAArBA,EAAQC,GACnC,MAIiB,KAAb,OAARqB,QAAQ,IAARA,OAAA,EAAAA,EAAUS,UAAiBN,IAC1B,iBAAKhC,UAAW6C,EAAhB,WACE,SAAC,MAAD,CAAWM,KAAM,GAAInD,UAAW8C,KAChC,cAAG9C,UAAW+C,EAAd,iDAKT,E,UEnCD,EAAwB,qBCIhBK,ECJsB,4BDITC,ECJmD,4BD2BxE,EArBe,WACb,IAAM1C,GAAWC,EAAAA,EAAAA,MAOjB,OACE,iCACE,eAAIZ,UAAWoD,EAAf,oCACA,kBACEvC,KAAK,OACLJ,KAAK,SACL6C,SAXqB,SAAAC,GACzB,IAAQC,EAAUD,EAAIE,OAAdD,MACR7C,GAAS+C,EAAAA,EAAAA,GAAUF,GACpB,EASKxD,UAAS,UAAKE,EAAL,YAAqBmD,OAIrC,E,8BEjBOM,ECRe,mBDQTC,ECRwC,wBDQ7BC,ECRqG,wBDQ1FC,ECRsD,wBDSlFC,EAAU7D,EACVD,EAAW+D,EAiFnB,EA/Ea,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOxD,EAAP,KAAayD,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOvD,EAAP,KAAeyD,EAAf,KAEMxD,GAAWC,EAAAA,EAAAA,MACXiB,GAAWmB,EAAAA,EAAAA,IAAYrB,GAEvByC,EAAa,CAAE3D,KAAAA,EAAMC,OAAAA,GAErB2D,EAAoB,SAAAd,GACxB,MAAwBA,EAAIE,OAApBhD,EAAR,EAAQA,KAAM+C,EAAd,EAAcA,MAED,SAAT/C,GAAiByD,EAAQV,GAChB,WAAT/C,GAAmB0D,EAAUX,EAClC,EAyBKc,EAAQ,WACZJ,EAAQ,IACRC,EAAU,GACX,EAED,OACE,kBAAMI,SA7Ba,SAAAhB,GACnBA,EAAIiB,iBADsB,gBAMJ3C,GANI,IAM1B,2BAAgC,CAC9B,GAD8B,QAClBpB,OAASA,EAOnB,OANAM,IAAAA,KAAU,CACRG,KAAM,QACNF,MAAO,UACPC,KAAK,IAAD,OAAMR,EAAN,oCAEN6D,GAGH,CAhByB,+BAkB1B3D,GAAS8D,EAAAA,EAAAA,IAAWL,IAEpBE,GACD,EAQ+BtE,UAAW2D,EAAzC,WACE,mBAAO3D,UAAW4D,EAAlB,kBAEE,kBACE/C,KAAK,OACLJ,KAAK,OACLT,UAAS,UAAK8D,EAAL,YAAkBC,GAC3BP,MAAO/C,EACP6C,SAAUe,EACVK,QAAQ,yHACR1D,MAAM,yIACN2D,UAAQ,QAGZ,mBAAO3E,UAAW4D,EAAlB,oBAEE,kBACE/C,KAAK,MACLJ,KAAK,SACLT,UAAS,UAAK8D,EAAL,YAAkBC,GAC3BP,MAAO9C,EACP4C,SAAUe,EACVK,QAAQ,yFACR1D,MAAM,+FACN2D,UAAQ,QAGZ,mBAAQ9D,KAAK,SAASb,UAAS,UAAKC,EAAL,YAAe4D,GAA9C,2BAKL,E,UExDD,MAxBA,WACE,IAAM7B,GAAYgB,EAAAA,EAAAA,IAAYjB,GACxBG,GAAQc,EAAAA,EAAAA,IAAYf,GACpBtB,GAAWC,EAAAA,EAAAA,MAMjB,OAJAgE,EAAAA,EAAAA,YAAU,WACRjE,GAASkE,EAAAA,EAAAA,MACV,GAAE,CAAClE,KAGF,4BACE,SAACmE,EAAA,EAAD,KACA,SAAC,EAAD,KACA,SAAC,EAAD,KACA,SAAC,EAAD,IACC9C,IAAcE,IACb,wBACE,sDAKT,C","sources":["webpack://react-homework-template/./src/components/MainTitle/MainTitle.module.css?cf7d","components/MainTitle/MainTitle.jsx","webpack://react-homework-template/./src/components/ContactsItem/ContactsItem.module.css?8722","webpack://react-homework-template/./src/css/button.module.css?ac6b","components/ContactsItem/ContactsItem.jsx","redux/contacts/contactsSelectors.js","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.css?d8e9","webpack://react-homework-template/./src/css/input.module.css?f4a2","components/Finder/Finder.jsx","webpack://react-homework-template/./src/components/Finder/Finder.module.css?e582","components/Form/Form.jsx","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"mainTitle\":\"MainTitle_mainTitle__C85E1\",\"titleIcon\":\"MainTitle_titleIcon__GLXiU\"};","import css from './MainTitle.module.css';\n// const { IoListCircleOutline } = require('react-icons/io5');\n\nconst { mainTitle } = css; // titleIcon\n\nfunction MainTitle() {\n  return (\n    // <h1 className={mainTitle}>\n    //   <span>Ph</span>\n    //   <IoListCircleOutline className={titleIcon} />\n    //   <span>nebook</span>\n    // </h1>\n    <h1 className={mainTitle}>Phonebook</h1>\n  );\n}\n\nexport default MainTitle;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsItem\":\"ContactsItem_contactsItem__MmqyM\",\"contactsIcon\":\"ContactsItem_contactsIcon__gIo8z\"};","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"button_button__kopgU\"};","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { FaPhoneAlt } from 'react-icons/fa';\nimport Swal from 'sweetalert2';\nimport css from './ContactsItem.module.css';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport styles from 'css/button.module.css';\n\nconst { button } = styles;\nconst { contactsIcon, contactsItem, deleteBtn } = css;\n\nconst ContactsItem = ({ contact }) => {\n  const { id, name, number } = contact;\n\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: `Yes, delete it!`,\n    }).then(result => {\n      if (result.isConfirmed) {\n        Swal.fire('Deleted!', `Contact '${name}' has been deleted.`, 'success');\n        dispatch(deleteContact(id));\n      }\n    });\n  };\n\n  return (\n    <li className={contactsItem}>\n      <FaPhoneAlt className={contactsIcon} />\n      {name}: {number}\n      <button\n        className={`${button} ${deleteBtn}`}\n        type=\"button\"\n        onClick={handleDelete}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactsItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string,\n  }).isRequired,\n};\n\nexport default ContactsItem;\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectErorr = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilter(state);\n\n  if (filter.length > 0) {\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n  return contacts;\n};\n","import { useSelector } from 'react-redux';\nimport { TbMoodSad } from 'react-icons/tb';\nimport ContactsItem from 'components/ContactsItem';\nimport css from './ContactsList.module.css';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/contactsSelectors';\n\nconst { contactsTitle, contactList, message, messageIcon, messageText } = css;\n\nconst ContactsList = () => {\n  const contacts = useSelector(selectContacts);\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <>\n      <h2 className={contactsTitle}>Contacts</h2>\n      {contacts?.length > 0 && (\n        <ul className={contactList}>\n          {visibleContacts.map(contact => {\n            return <ContactsItem key={contact.id} contact={contact} />;\n          })}\n        </ul>\n      )}\n\n      {contacts?.length === 0 && !isLoading && (\n        <div className={message}>\n          <TbMoodSad size={80} className={messageIcon} />\n          <p className={messageText}>You don't have any contact yet</p>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ContactsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactsList_contactList__qIIH9\",\"contactsTitle\":\"ContactsList_contactsTitle__khAsY\",\"messageIcon\":\"ContactsList_messageIcon__yWer-\",\"message\":\"ContactsList_message__G8GbT\",\"messageText\":\"ContactsList_messageText__+OuYM\"};","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"input_input__JIe8F\"};","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport css from './Finder.module.css';\nimport styles from 'css/input.module.css';\n\nconst { finderTitle, finderInput } = css;\n\nconst Finder = () => {\n  const dispatch = useDispatch();\n\n  const handleFinderChange = evt => {\n    const { value } = evt.target;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <>\n      <h3 className={finderTitle}>Find contacts by name</h3>\n      <input\n        type=\"text\"\n        name=\"finder\"\n        onChange={handleFinderChange}\n        className={`${styles.input} ${finderInput}`}\n      ></input>\n    </>\n  );\n};\n\nexport default Finder;\n","// extracted by mini-css-extract-plugin\nexport default {\"finderTitle\":\"Finder_finderTitle__OIuPA\",\"finderInput\":\"Finder_finderInput__gAvsC\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport Swal from 'sweetalert2';\nimport css from './Form.module.css';\nimport styles from 'css/input.module.css';\nimport style from 'css/button.module.css';\n\nconst { form, formLabel, submitBtn, formInput } = css;\nconst { input } = styles;\nconst { button } = style;\n\nconst Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumder] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const newContact = { name, number };\n\n  const handleInputChange = evt => {\n    const { name, value } = evt.target;\n\n    if (name === 'name') setName(value);\n    if (name === 'number') setNumder(value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    // const name = evt.target.elements.name.value;\n    // const number = evt.target.elements.number.value;\n\n    for (const contact of contacts) {\n      if (contact.name === name) {\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: `'${name}' is already in contacts.`,\n        });\n        reset();\n        return;\n      }\n    }\n\n    dispatch(addContact(newContact));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumder('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={form}>\n      <label className={formLabel}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          className={`${formInput} ${input}`}\n          value={name}\n          onChange={handleInputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={formLabel}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          className={`${formInput} ${input}`}\n          value={number}\n          onChange={handleInputChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={`${button} ${submitBtn}`}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default Form;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"formLabel\":\"Form_formLabel__alHO0\",\"formInput\":\"Form_formInput__sgOCo\",\"submitBtn\":\"Form_submitBtn__eUc-v\"};","import ContactsList from 'components/ContactsList';\nimport Finder from 'components/Finder';\nimport Form from 'components/Form';\nimport MainTitle from 'components/MainTitle';\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { selectErorr, selectIsLoading } from 'redux/contacts/contactsSelectors';\n\nfunction ContactsPage() {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectErorr);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <MainTitle />\n      <Form />\n      <Finder />\n      <ContactsList />\n      {isLoading && !error && (\n        <p>\n          <b>Request in progress...</b>\n        </p>\n      )}\n    </div>\n  );\n}\n\nexport default ContactsPage;\n"],"names":["className","button","styles","contactsIcon","css","contactsItem","deleteBtn","contact","id","name","number","dispatch","useDispatch","type","onClick","Swal","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","deleteContact","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectErorr","error","selectVisibleContacts","filter","selectFilter","length","normalizedFilter","toLowerCase","trim","includes","contactsTitle","contactList","message","messageIcon","messageText","useSelector","visibleContacts","map","size","finderTitle","finderInput","onChange","evt","value","target","setFilter","form","formLabel","submitBtn","formInput","input","style","useState","setName","setNumder","newContact","handleInputChange","reset","onSubmit","preventDefault","addContact","pattern","required","useEffect","fetchContacts","MainTitle"],"sourceRoot":""}